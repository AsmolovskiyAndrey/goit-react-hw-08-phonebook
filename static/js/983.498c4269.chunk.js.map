{"version":3,"file":"static/js/983.498c4269.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactEditor/ContactEditor.module.css?ead8","components/Filter/Filter.js","components/ContactEditor/ContactEditor.js","pages/Phonebook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__K-zLN\",\"text\":\"Contact_text__Wq-3f\",\"button\":\"Contact_button__F+kJb\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport css from './Contact.module.css';\nimport { Box, Button } from '@mui/material';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Box className={css.wrapper}>\n      <p className={css.text}>\n        {name}: {number}\n      </p>\n      <Button type=\"button\" className={css.button} onClick={handleDelete}>\n        Delete Contact\n      </Button>\n    </Box>\n  );\n};\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllContacts = state => state.tasks.items;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from 'react-redux';\nimport { Contact } from '../Contact/Contact';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport css from './ContactList.module.css';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const myContacts = useSelector(selectAllContacts);\n  const myFilter = useSelector(selectFilter);\n\n  const getVisibleContacts = () => {\n    const normalized = myFilter.toLowerCase();\n    return myContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalized)\n    );\n  };\n\n  return (\n    <ul className={css.list}>\n      {getVisibleContacts().length === 0 && myContacts.length > 0 && (\n        <strong>Sorry, your search did not find any contacts.</strong>\n      )}\n\n      {myContacts.length > 0 &&\n        getVisibleContacts().map(({ id, name, number }) => (\n          <li key={id}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactEditor_form__U4ufl\",\"input\":\"ContactEditor_input__Nbns0\",\"button\":\"ContactEditor_button__yGZhk\"};","// import { Title } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addFilter } from 'redux/contacts/slice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleInputChanged = evt => {\n    dispatch(addFilter(evt.target.value));\n  };\n\n  return (\n    <>\n      {/* <Title>Find contacts by name</Title> */}\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Find contacts by name\"\n        defaultValue=\"Small\"\n        variant=\"outlined\"\n        fullWidth\n        sx={{\n          mb: 2,\n          bgcolor: 'background.paper',\n          boxShadow: 1,\n          borderRadius: 2,\n        }}\n        type=\"search\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleInputChanged}\n      />\n    </>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport css from './ContactEditor.module.css';\nimport { useState } from 'react';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport toast from 'react-hot-toast';\nimport { Button } from '@mui/material';\n\nexport const ContactEditor = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const myContacts = useSelector(selectAllContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addContactLocal({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  const addContactLocal = data => {\n    const { name, number } = data;\n    if (checkDoubleContact(data)) {\n      // alert(`${name} is already in contacts.`);\n      toast.error(`${name} is already in contacts.`);\n      return;\n    }\n    const newContact = {\n      // id: nanoid(), //! Добавляется на сервере\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n  };\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        console.warn(`Error types in ${e}`);\n    }\n  };\n\n  const checkDoubleContact = inputData => {\n    return myContacts.find(contact => contact.name === inputData.name);\n  };\n\n  return (\n    <>\n      <Filter />\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label>\n          <div>Name</div>\n          <input\n            className={css.input}\n            value={name}\n            onChange={handleInputChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          <div>Number</div>\n          <input\n            className={css.input}\n            value={number}\n            onChange={handleInputChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <Button type=\"submit\" className={css.button}>\n          Add contact\n        </Button>\n      </form>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["Contact","id","name","number","dispatch","useDispatch","Box","className","css","Button","type","onClick","deleteContact","selectLoading","state","tasks","loading","selectFilter","filter","selectAllContacts","items","ContactList","myContacts","useSelector","myFilter","getVisibleContacts","normalized","toLowerCase","contact","includes","length","map","Filter","TextField","label","defaultValue","variant","fullWidth","sx","mb","bgcolor","boxShadow","borderRadius","value","onChange","evt","addFilter","target","ContactEditor","useState","setName","setNumber","addContactLocal","data","checkDoubleContact","toast","newContact","addContact","handleInputChange","e","console","warn","inputData","find","onSubmit","preventDefault","pattern","title","required","Phonebook","isLoading","useEffect","fetchContacts"],"sourceRoot":""}